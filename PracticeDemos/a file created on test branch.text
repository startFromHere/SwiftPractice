//
//  WPRefreshHeader.m
//  WPRefreshHeader
//
//  Created by Ahri on 17/11/11.
//
//

#import "WPRefreshHeader.h"
#import "pop.h"
#import <Lottie/Lottie.h>

static NSString *wpRefreshStr = @"WPRefreshHeaderEndRefresh";
@interface WPRefreshHeader()

@property (nonatomic, strong) LOTAnimationView *aninationV;

@property (nonatomic, assign) BOOL animationStatus;

/**
 文字label
 */
@property (nonatomic, strong) UILabel *titleLabel;

/**
 是否正在收回
 */
@property (nonatomic, assign) BOOL isReclaim;

@property (nonatomic, copy) void(^block)(void);

@property (nonatomic, weak) UISlider *slider;

@property (nonatomic, strong) WPButton *successBtn;

@property (nonatomic, strong) WPButton *failBtn;

@end

@implementation WPRefreshHeader
#pragma mark - 重写方法
#pragma mark 在这里做一些初始化配置（比如添加子控件）
- (void)prepare
{
    [super prepare];
    
    // 设置控件的高度
    self.mj_h = 70;
    
    self.aninationV = [LOTAnimationView animationWithFilePath:[[NSBundle mainBundle] pathForResource:@"refresh_success" ofType:@"json"]];
    self.animationStatus = YES;
    self.aninationV.frame = CGRectMake(0, 0, 32, 32);
    self.aninationV.animationSpeed = 1;
    [self addSubview:self.aninationV];

    
    self.titleLabel = [[UILabel alloc] init];
    self.titleLabel.font = [UIFont systemFontOfSize:13.0f];
    self.titleLabel.textColor = [UIColor colorWithHexString:@"#999999"];
    NSMutableDictionary *attrs = [NSMutableDictionary dictionary];
         attrs[NSFontAttributeName] = [UIFont systemFontOfSize:13];
    
    CGSize size =  [@"正在刷新" boundingRectWithSize:CGSizeMake(200, 26) options:NSStringDrawingUsesLineFragmentOrigin attributes:attrs context:nil].size;
    self.titleLabel.frame = CGRectMake(0, 0, size.width + 60, 26.0f);
    [self addSubview:self.titleLabel];
}

- (void)setHeaderHeight:(CGFloat)headerHeight
{
    _headerHeight = headerHeight;
    self.mj_h = headerHeight;
}

+ (instancetype)headerWithRefreshingTarget:(id)target refreshingAction:(SEL)action
{
    WPRefreshHeader *header = [super headerWithRefreshingTarget:target refreshingAction:action];
    [[NSNotificationCenter defaultCenter] addObserver:header selector:@selector(endRefreshing) name:wpRefreshStr object:NULL];
    return header;
}

#pragma mark 在这里设置子控件的位置和尺寸
- (void)placeSubviews
{
    [super placeSubviews];
    self.titleLabel.center = CGPointMake(self.mj_w * 0.5 + 30, self.mj_h - 14.0f);
    self.aninationV.center =  CGPointMake(self.mj_w * 0.5 , self.mj_h - 40.0f);
    
}

#pragma mark 监听scrollView的contentOffset改变
- (void)scrollViewContentOffsetDidChange:(NSDictionary *)change
{
    [super scrollViewContentOffsetDidChange:change];
//    if (self.scrollView.isDragging) {
//        self.progressView.canReclaim = NO;
//    }else {
//        self.progressView.canReclaim = YES;
//    }

}

#pragma mark 监听scrollView的contentSize改变
- (void)scrollViewContentSizeDidChange:(NSDictionary *)change
{
    [super scrollViewContentSizeDidChange:change];
    
}

#pragma mark 监听scrollView的拖拽状态改变
- (void)scrollViewPanStateDidChange:(NSDictionary *)change
{
    [super scrollViewPanStateDidChange:change];

}

#pragma mark 监听控件的刷新状态
- (void)setState:(MJRefreshState)state
{
    MJRefreshCheckState;

    switch (state) {
        case MJRefreshStateIdle:{
           
            break;
        }
        case MJRefreshStatePulling:
            break;
        case MJRefreshStateRefreshing:
        {
            self.titleLabel.text = @"正在刷新...";
            [self textAnimateDuringRefreshing];
            self.aninationV.loopAnimation = NO;
            WPWeakSelf
            [self test];
            [self.aninationV playFromProgress:0.15 toProgress:0.30 withCompletion:^(BOOL animationFinished) {
                if (animationFinished) {
                    weakSelf.aninationV.loopAnimation = YES;
                    [weakSelf.aninationV playFromProgress:0.30 toProgress:0.81 withCompletion:nil];
                }
            }];
            break;
        }
        case MJRefreshStateWillRefresh:{
    
            break;
        }
        default:
            break;
    }
}

- (void)test{
    if (!self.slider) {
        UISlider *slider = [[UISlider alloc] initWithFrame:CGRectMake(0, 400, __MainScreen_Width, 80)];
        [WPAppdelegateInstance.currentViewController.view addSubview:slider];
        [slider addTarget:self action:@selector(changeValueOf:) forControlEvents:UIControlEventValueChanged];
        slider.minimumValue = 0;
        slider.maximumValue = 1.0;
        self.slider = slider;
        
        self.successBtn = [[WPButton alloc] initWithTitle:@"success" touchupEvent:@selector(success) target:self];
        self.successBtn.frame = CGRectMake(10, 500, 100, 80);
        self.successBtn.enabled = YES;
        [WPAppdelegateInstance.currentViewController.view addSubview:self.successBtn];
        
        self.failBtn = [[WPButton alloc] initWithTitle:@"failed" touchupEvent:@selector(failed) target:self];
        self.failBtn.frame = CGRectMake(__MainScreen_Width - 210, 500, 100, 80);
        self.failBtn.enabled = YES;
        [WPAppdelegateInstance.currentViewController.view addSubview:self.failBtn];
    }
}

- (void)changeValueOf:(UISlider *)slider{
    self.aninationV.animationProgress = slider.value;
    NSLog(@"000000000sliderValue:%f",slider.value);
}

- (void)success{
    [self endRefreshingSuccess1:nil];
}

- (void)failed{
    [self endRefreshingFailed1:nil];
}

#pragma mark 监听拖拽比例（控件被拖出来的比例）
- (void)setPullingPercent:(CGFloat)pullingPercent
{
    [super setPullingPercent:pullingPercent];
    if (self.state == MJRefreshStateIdle) {
        
        if (!self.animationStatus) {
             self.aninationV.sceneModel = [LOTComposition animationWithFilePath:[[NSBundle mainBundle] pathForResource:@"refresh_success" ofType:@"json"]];
        }
        
        self.titleLabel.text = @"";
        
        self.aninationV.loopAnimation = NO;
        if (pullingPercent >= 0.3 && !self.isReclaim) {
            
            self.aninationV.animationProgress = pullingPercent > 1 ? 0.144: 0.144 * (pullingPercent - 0.3) / 0.7;
            
        }else {
            self.aninationV.animationProgress = 0;
        }
    }
}

- (void)endRefreshingSuccess:(void(^)(void))block
{
    //防止非刷新状态下调用
//    if (MJRefreshStateRefreshing != self.state) {
//        return ;
//    }
//
//    WPWeakSelf
//
//    dispatch_async(dispatch_get_main_queue(), ^{
//        [weakSelf.aninationV pause];
//
//        weakSelf.aninationV.loopAnimation = NO;
//        [weakSelf.aninationV playFromProgress:weakSelf.aninationV.animationProgress toProgress:0.9 withCompletion:^(BOOL animationFinished) {
//            if (animationFinished) {
//                weakSelf.isReclaim = YES;
//                weakSelf.titleLabel.text = @"刷新成功";
//
//                [weakSelf.aninationV playFromProgress:0.9 toProgress:1 withCompletion:^(BOOL completed) {
//                    [super endRefreshing];
//                    weakSelf.isReclaim = NO;
//                    weakSelf.titleLabel.text = @"";
//                    if (completed) {
//                        if (block)
//                            block();
//                    }
//                }];
//            }else {//离开界面，
//                [super endRefreshing];
//                if (block)
//                    block();
//            }
//        }];
//    });
}

- (void)endRefreshingSuccess1:(void(^)(void))block
{
    //防止非刷新状态下调用
    if (MJRefreshStateRefreshing != self.state) {
        return ;
    }
    
    WPWeakSelf
    
    dispatch_async(dispatch_get_main_queue(), ^{
        [weakSelf.aninationV pause];
        
        weakSelf.aninationV.loopAnimation = NO;
        [weakSelf.aninationV playFromProgress:weakSelf.aninationV.animationProgress toProgress:0.9 withCompletion:^(BOOL animationFinished) {
            if (animationFinished) {
                weakSelf.isReclaim = YES;
                weakSelf.titleLabel.text = @"刷新成功";
                
                [weakSelf.aninationV playFromProgress:0.9 toProgress:1 withCompletion:^(BOOL completed) {
                    [super endRefreshing];
                    weakSelf.isReclaim = NO;
                    weakSelf.titleLabel.text = @"";
                    if (completed) {
                        if (block)
                            block();
                    }
                }];
            }else {//离开界面，
                [super endRefreshing];
                if (block)
                    block();
            }
        }];
    });
}

- (void)endRefreshingFailed:(void(^)(void))block
{
  
//    if (MJRefreshStateRefreshing != self.state) {
//        return ;
//    }
//
//    [self.aninationV pause];
//    WPWeakSelf
//    self.aninationV.loopAnimation = NO;
//
//    [self.aninationV playFromProgress:self.aninationV.animationProgress toProgress:0.64 withCompletion:^(BOOL animationFinished) {
//
//        if (animationFinished) {
//            weakSelf.isReclaim = YES;
//            weakSelf.animationStatus = NO;
//            weakSelf.aninationV.sceneModel = [LOTComposition animationWithFilePath:[[NSBundle mainBundle] pathForResource:@"refresh_failed" ofType:@"json"]];
//
//            [weakSelf.aninationV playToProgress:1 withCompletion:^(BOOL completion) {
//                weakSelf.isReclaim = NO;
//                [super endRefreshing];
//                if (completion) {
//                    if (block)
//                        block();
//                }
//            }];
//        }else {
//            [super endRefreshing];
//            if (block)
//                block();
//        }
//    }];

}

- (void)endRefreshingFailed1:(void(^)(void))block
{
    
    if (MJRefreshStateRefreshing != self.state) {
        return ;
    }
    
    [self.aninationV pause];
    WPWeakSelf
    self.aninationV.loopAnimation = NO;
    
    [self.aninationV playFromProgress:self.aninationV.animationProgress toProgress:0.64 withCompletion:^(BOOL animationFinished) {
        
        if (animationFinished) {
            weakSelf.isReclaim = YES;
            weakSelf.animationStatus = NO;
            weakSelf.aninationV.sceneModel = [LOTComposition animationWithFilePath:[[NSBundle mainBundle] pathForResource:@"refresh_failed" ofType:@"json"]];
            
            [weakSelf.aninationV playToProgress:1 withCompletion:^(BOOL completion) {
                weakSelf.isReclaim = NO;
                [super endRefreshing];
                if (completion) {
                    if (block)
                        block();
                }
            }];
        }else {
            [super endRefreshing];
            if (block)
                block();
        }
    }];
    
}

- (void)endRefreshing
{
    [super endRefreshing];
}


#pragma mark - 动效回调

- (void)textAnimateDuringRefreshing
{
    if (self.state == MJRefreshStateRefreshing && !self.isReclaim) {
        if ([self.titleLabel.text isEqualToString:@"正在刷新.  "]) {
            self.titleLabel.text = @"正在刷新.. ";
        }else if([self.titleLabel.text isEqualToString:@"正在刷新.. "]) {
            self.titleLabel.text = @"正在刷新...";
        }else {
            self.titleLabel.text = @"正在刷新.  ";
        }
        __weak typeof(self) weakSelf = self;
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.3f * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            
            [weakSelf textAnimateDuringRefreshing];
        });
    }
}

@end
